import torch
from torch.optim import Optimizer
import math
from typing import Tuple, Callable, Union

"""
EmoCats v2.0 (250815) shadow-system v2.0 shadow-effect v1.0
AMPÂØæÂøúÂÆå‰∫Ü(202507) p.data -> p ‰øÆÊ≠£Ê∏à„Åø
memo : "optimizer = EmoCats(model.parameters(), lr=1e-3, use_shadow=True)"
optimizer ÊåáÂÆö„ÅÆÈöõ„Å´ True / False „Åß shadow „ÇíÂàáÊõø„Åß„Åç„Çã(ÁèæÂú® False)
"""

# Helper function (Lynx)
def exists(val):
    return val is not None

class EmoCats(Optimizer):
    # „ÇØ„É©„ÇπÂÆöÁæ©ÔºÜÂàùÊúüÂåñ üî∏Shadow True(ÊúâÂäπ)/False(ÁÑ°Âäπ) ÂàáÊõø„Åà
    def __init__(self, params: Union[list, torch.nn.Module], lr=1e-3, betas=(0.9, 0.99), 
    # lynxÁî®„Éô„Éº„ÇøÔΩ•‰∫íÊèõÊÄß„ÅÆËøΩÂä†(lynxÁî®beta1ÔΩ•beta2)
                 eps=1e-8, weight_decay=0.01, decoupled_weight_decay: bool = False, use_shadow: bool = False): 

        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        super().__init__(params, defaults)
        
        # lynx„Å´Âøú„Åò„Å¶„Ç¶„Çß„Ç§„ÉàÊ∏õË°∞„ÅÆ„Åü„ÇÅ‰øùÂ≠ò
        self._init_lr = lr
        self.should_stop = False # ÂÅúÊ≠¢„Éï„É©„Ç∞„ÅÆÂàùÊúüÂåñ
        self.decoupled_wd = decoupled_weight_decay
        self.use_shadow = use_shadow # üî∏shadow„ÅÆ‰ΩøÁî®„Éï„É©„Ç∞„Çí‰øùÂ≠ò

    # ÊÑüÊÉÖEMAÊõ¥Êñ∞(Á∑äÂºµ„Å®ÂÆâÈùô)
    def _update_ema(self, state, loss_val):
        ema = state.setdefault('ema', {})
        ema['short'] = 0.3 * loss_val + 0.7 * ema.get('short', loss_val)
        ema['long'] = 0.01 * loss_val + 0.99 * ema.get('long', loss_val)
        return ema

    # ÊÑüÊÉÖ„Çπ„Ç´„É©„ÉºÂÄ§ÁîüÊàê(EMAÂ∑ÆÂàÜ„ÄÅÊªë„Çâ„Åã„Å™ÈùûÁ∑öÂΩ¢„Çπ„Ç´„É©„Éº„ÄÅtanh 5 * diff „ÅßÈã≠Êïè„ÅïÂº∑Ë™ø)
    def _compute_scalar(self, ema):
        diff = ema['short'] - ema['long']
        return math.tanh(5 * diff)

    # ShadowÊ∑∑ÂêàÊØîÁéá(> abs 0.6Ôºö60„Äú100%„ÄÅ > abs 0.1Ôºö10„Äú60%„ÄÅ Âπ≥ÊôÇÔºö0%) emosensÂèçÊò†
    # ÊóßÔºöShadowÊ∑∑ÂêàÊØîÁéá(> 0.6Ôºö80„Äú90%„ÄÅ < -0.6Ôºö10%„ÄÅ abs> 0.3Ôºö30%„ÄÅ Âπ≥ÊôÇÔºö0%)
    # Ë™¨ÊòéÔºöscalar>+0.6 „ÅØ "return 0.7(ÈñãÂßãÂÄ§) + 0.2(Â§âÂåñÂπÖ) * scalar" = 0.82ÔΩû0.9 ‚Üê Ë™§
    # ‰øÆÊ≠£1Ôºöscalar>¬±0.6 „Çí "return ÈñãÂßãÂÄ§ + (abs(scalar) - 0.6(ÁØÑÂõ≤)) / ÁØÑÂõ≤Èáè * Â§âÂåñÂπÖ"
    # ‰øÆÊ≠£2Ôºöscalar>¬±0.1 „Çí "return ÈñãÂßãÂÄ§ + (abs(scalar) - 0.1(ÁØÑÂõ≤)) / ÁØÑÂõ≤Èáè * Â§âÂåñÂπÖ"
    # „Çø„Çπ„ÇØÁ≠â„Å´Âøú„Åò„ÅüË™øÊï¥„ÅÆ„Åü„ÇÅÔºìÊÆµÈöé„ÅßÈÅ©Áî®„Åó„Å¶„Åä„Åè(‰∏äË®ò„ÇíÂèÇËÄÉ„Å´Ë™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºèÁèæÁä∂„ÅØshadow-effectÂèçÊò†)
    def _decide_ratio(self, scalar):
        if not self.use_shadow:
            return 0.0 # üî∏use_shadow „Åå False „ÅÆÂ†¥Âêà„ÅØÂ∏∏„Å´ÊØîÁéá„Çí 0 „Å´„Åô„Çã
        if abs(scalar) > 0.6:
            return 0.6 + (abs(scalar) - 0.6) / 0.4 * 0.4 # ÂÖÉ return 0.7 + 0.2 * scalar
        elif abs(scalar) > 0.1:
            return 0.1 + (abs(scalar) - 0.1) / 0.5 * 0.5 # ÂÖÉ return 0.3
        return 0.0

    # ÊêçÂ§±ÂèñÂæó(ÊêçÂ§±ÂÄ§ loss_val „ÇíÊï∞ÂÄ§Âåñ„ÄÅÊÑüÊÉÖÂà§ÂÆö„Å´‰ΩøÁî®„ÄÅÂ≠òÂú®„Åó„Å™„ÅÑ„Éë„É©„É°„Éº„Çø(Êõ¥Êñ∞‰∏çË¶Å)„ÅØ„Çπ„Ç≠„ÉÉ„Éó)
    @torch.no_grad()
    def step(self, closure: Callable | None = None): # „ÇØ„É≠„Éº„Ç∏„É£„ÅÆÂûã„Éí„É≥„Éà„ÇíËøΩÂä†
        loss = None
        if exists(closure): # ‰∏ÄË≤´ÊÄß„ÅÆ„Åü„ÇÅ„Å´exists„Éò„É´„Éë„Éº„Çí‰Ωø„ÅÜ
            with torch.enable_grad():
                loss = closure()
        loss_val = loss.item() if loss is not None else 0.0

        for group in self.param_groups:
            # ÂÖ±ÈÄö„Éë„É©„É°„Éº„ÇøÊäΩÂá∫
            lr, wd, beta1, beta2 = group['lr'], group['weight_decay'], *group['betas']
            
            # „Ç¶„Çß„Ç§„ÉàÊ∏õË°∞„ÅÆÂá¶ÁêÜ„ÇíÂàÜÈõ¢ (from Cats)
            _wd_actual = wd
            if self.decoupled_wd:
                _wd_actual /= self._init_lr # ÈùûÈÄ£ÁµêÊôÇ„Ç¶„Çß„Ç§„ÉàÊ∏õË°∞Ë™øÊï¥

            for p in filter(lambda p: exists(p.grad), group['params']): # PG„ÉÅ„Çß„ÉÉ„ÇØ„Å´„Éï„Ç£„É´„Çø

                grad = p.grad # PGÁõ¥Êé•‰ΩøÁî®(Ë®àÁÆó„Å´".data"‰∏çË¶Å)
                state = self.state[p]

                # EMAÊõ¥Êñ∞„Éª„Çπ„Ç´„É©„ÉºÁîüÊàê(EMAÂ∑ÆÂàÜ„Åã„Çâ„Çπ„Ç´„É©„Éº„ÇíÁîüÊàê„Åó„Çπ„Éë„Ç§„ÇØÊØîÁéá„ÇíÊ±∫ÂÆö)
                ema = self._update_ema(state, loss_val)
                scalar = self._compute_scalar(ema)
                ratio = self._decide_ratio(scalar) # üî∏use_shadow „Å´Âøú„Åò„Å¶ ratio „Åå 0 „Å´„Å™„Çã

                # shadow_paramÔºöÂøÖË¶ÅÊôÇ„ÅÆ„ÅøÊõ¥Êñ∞(„Çπ„Éë„Ç§„ÇØÈÉ®ÂàÜ„Å´ÁèæÂú®ÂÄ§„Çí5%„Åö„Å§ËøΩÂæì„Åï„Åõ„ÇãÂãïÁöÑÂ±•Ê≠¥)
                # üî∏self.use_shadow „Åå True „Åß„ÄÅ„Åã„Å§ ratio > 0 „ÅÆÂ†¥Âêà„ÅÆ„Åø shadow „ÇíÊõ¥Êñ∞
                if self.use_shadow and ratio > 0: 
                    if 'shadow' not in state:
                        state['shadow'] = p.clone()
                    else:
                        p.mul_(1 - ratio).add_(state['shadow'], alpha=ratio) 
                        state['shadow'].lerp_(p, 0.05) 
                        # Êõ¥Êñ∞Ââç p „Åß shadow Êõ¥Êñ∞(ÁèæÂú®ÂÄ§„Çí5%„Åö„Å§ËøΩÂæì)
                        # p.mul_(1 - ratio).add_(state['shadow'], alpha=ratio) 
                        # EmoNavi: p = p * (1-ratio) + shadow * ratio

                # --- Start Cats Gradient Update Logic ---
                
                # CatsÂàùÊúüÂåñ(exp_avg_sq)
                if 'exp_avg' not in state:
                    state['exp_avg'] = torch.zeros_like(p)
                exp_avg = state['exp_avg']
                
                # „Éï„Ç£„É´„Çø„Éº„ÅÆ„Åó„Åç„ÅÑÂÄ§„Çíscalar„ÅßÂãïÁöÑ„Å´Ê±∫ÂÆö
                threshold = 1e-4 * (1 + abs(scalar))
                
                # ÂãæÈÖç„ÅÆÂ§ö‰πóÊ†π„ÇíË®àÁÆó„Åó„Å¶„ÄÅ„Éï„Ç£„É´„Çø„Éº„ÅÆÂü∫Ê∫ñ„Å®„Åô„Çã
                # Lion„ÅÆÊõ¥Êñ∞„ÅØÁ¨¶Âè∑„ÅåÈáçË¶Å„Å™„ÅÆ„Åß„ÄÅÂãæÈÖçËá™‰Ωì„Åß„ÅØ„Å™„Åè„ÄÅ„Åù„ÅÆÁµ∂ÂØæÂÄ§„ÇíÂü∫Ê∫ñ„Å®„Åó„Åæ„Åô
                filter_strength = torch.abs(grad).pow(1/3)
                
                # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Âº∑Â∫¶„Åå„Åó„Åç„ÅÑÂÄ§„ÇíË∂Ö„Åà„ÅüÈÉ®ÂàÜ„ÅåTrue„Å´„Å™„Çã
                mask = torch.ge(filter_strength, threshold).float()

                # Stepweight decay (from lynx): p = p * (1 - lr * wd)
                # decoupled_wd ËÄÉÊÖÆ _wd_actual ‰ΩøÁî®(EmoNavi„ÅÆwd„ÅØÊúÄÂæå„Å´ÈÅ©Áî®)
                p.mul_(1. - lr * _wd_actual)

                # ÂãæÈÖç„Éñ„É¨„É≥„Éâ
                # m_t = beta1 * exp_avg_prev + (1 - beta1) * grad
                blended_grad = grad.mul(1. - beta1).add_(exp_avg, alpha=beta1)
                
                # Êõ¥Êñ∞„ÇíË®àÁÆó p: p = p - lr * sign(blended_grad)
                Cats_update = blended_grad.sign_()
                
                # Ê¨°„Å´„ÄÅ„Åì„ÅÆÊõ¥Êñ∞È†Ö„Å´„Éï„Ç£„É´„Çø„Éº„Éû„Çπ„ÇØ„ÇíÊéõ„ÅëÂêà„Çè„Åõ„Çã
                filtered_Cats_update = Cats_update * mask
                
                # p: p = p - lr * sign(blended_grad)
                p.add_(filtered_Cats_update, alpha = -lr * (1 - abs(scalar)))

                # exp_avg = beta2 * exp_avg + (1 - beta2) * grad
                exp_avg.mul_(beta2).add_(grad, alpha = 1. - beta2)

                # --- End Cats Gradient Update Logic ---

                # Early StopÁî® scalarË®òÈå≤(„Éê„ÉÉ„Éï„Ç°ÂÖ±ÈÄö„ÅßÁÆ°ÁêÜ/ÊúÄÂ§ß32‰ª∂‰øùÊåÅ/ÂãïÈùôË©ï‰æ°)
                # „Åì„ÅÆÈÉ®ÂàÜ„ÅØ p.state „Åß„ÅØ„Å™„Åè self.state „Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã
                hist = self.state.setdefault('scalar_hist', [])
                hist.append(scalar)
                if len(hist) >= 33:
                    hist.pop(0)

        # Early StopÂà§Êñ≠(Èùô„Åë„Åï„ÅÆÂêàÂõ≥) - This part is outside the inner loop
        if len(self.state['scalar_hist']) >= 32:
            buf = self.state['scalar_hist']
            avg_abs = sum(abs(s) for s in buf) / len(buf)
            std = sum((s - sum(buf)/len(buf))**2 for s in buf) / len(buf)
            if avg_abs < 0.05 and std < 0.005:
                self.should_stop = True # Â§ñÈÉ®„Åã„Çâ„Åì„Çå„ÇíË¶ã„Å¶Âà§Êñ≠ÂèØ

        return loss

"""
 https://github.com/muooon/EmoNavi
 Cats was developed with inspiration from Lion, Tiger, and emoneco, 
 which we deeply respect for their lightweight and intelligent design.  
 Cats also integrates EmoNAVI to enhance its capabilities.
"""